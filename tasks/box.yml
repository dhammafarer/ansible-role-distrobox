---
- name: Ensure that container home directory exists.
  ansible.builtin.file:
    path: "{{ box_home }}"
    state: directory
    mode: "0755"

- name: Create the container.
  ansible.builtin.command:
    cmd: >
      distrobox create -i {{ box_image }}
      -n {{ box_name }}
      -H {{ box_home }}
      {{ box_extra_args }}
  register: dc
  changed_when: "'already exists' not in dc.stdout"

- name: Ensure systemd unit is generated and enabled.
  when: box_systemd_generated or box_systemd_enabled
  block:
    - name: Ensure systemd unit is generated for {{ box_name }}.
      containers.podman.podman_generate_systemd:
        name: "{{ box_name }}"
        dest: ~/.config/systemd/user/

    - name: Ensure systemd service is enabled for {{ box_name }}.
      when: box_systemd_enabled
      ansible.builtin.systemd:
        name: container-{{ box_name }}
        daemon_reload: true
        enabled: true
        scope: user

- name: Attempt to run the container.
  when: box_initialize
  block:
    - name: Initialize the container.
      ansible.builtin.command:
        cmd: "distrobox enter {{ box_name }}"
      changed_when: true
      register: init
  rescue:
    - name: Remove the container.
      ansible.builtin.command:
        cmd: "distrobox rm --force {{ box_name }}"
      changed_when: true

    - name: Print a failure message.
      ansible.builtin.fail:
        msg: "{{ init }}"
